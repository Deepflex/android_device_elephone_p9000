commit 04d7383cd7080fd8bc515e9355891e6447587854
Author: Deepflex <hqdevnews@gmail.com>
Date:   Thu Aug 25 03:22:58 2016 +0700

    netd update
    
    Change-Id: If8029cce7b9fb5a47db7effb09d0731ea2407aee

diff --git a/server/BandwidthController.cpp b/server/BandwidthController.cpp
index 4f9e33e..85b1f5b 100644
--- a/server/BandwidthController.cpp
+++ b/server/BandwidthController.cpp
@@ -692,13 +692,6 @@ int BandwidthController::prepCostlyIface(const char *ifn, QuotaType quotaType) {
 
     snprintf(cmd, sizeof(cmd), "-I bw_OUTPUT %d -o %s --jump %s", ruleInsertPos, ifn, costCString);
     res |= runIpxtablesCmd(cmd, IptJumpNoAdd);
-
-    snprintf(cmd, sizeof(cmd), "-D bw_FORWARD -i %s --jump %s", ifn, costCString);
-    runIpxtablesCmd(cmd, IptJumpNoAdd, IptFailHide);
-
-    snprintf(cmd, sizeof(cmd), "-I bw_FORWARD %d -i %s --jump %s", ruleInsertPos, ifn, costCString);
-    res |= runIpxtablesCmd(cmd, IptJumpNoAdd);
-
     return res;
 }
 
diff --git a/server/NetlinkHandler.cpp b/server/NetlinkHandler.cpp
index 8038b61..97dc3e0 100644
--- a/server/NetlinkHandler.cpp
+++ b/server/NetlinkHandler.cpp
@@ -104,7 +104,7 @@ void NetlinkHandler::onEvent(NetlinkEvent *evt) {
             }
         }
 
-    } else if (!strcmp(subsys, "qlog") || !strcmp(subsys, "xt_quota2")) {
+    } else if (!strcmp(subsys, "qlog")) {
         const char *alertName = evt->findParam("ALERT_NAME");
         const char *iface = evt->findParam("INTERFACE");
         notifyQuotaLimitReached(alertName, iface);
diff --git a/server/NetlinkManager.cpp b/server/NetlinkManager.cpp
index 769a80a..76af46f 100644
--- a/server/NetlinkManager.cpp
+++ b/server/NetlinkManager.cpp
@@ -142,7 +142,7 @@ int NetlinkManager::start() {
 
     if ((mQuotaHandler = setupSocket(&mQuotaSock, NETLINK_NFLOG,
             NFLOG_QUOTA_GROUP, NetlinkListener::NETLINK_FORMAT_BINARY, false)) == NULL) {
-        ALOGW("Unable to open qlog quota socket, check if xt_quota2 can send via UeventHandler");
+        ALOGE("Unable to open quota socket");
         // TODO: return -1 once the emulator gets a new kernel.
     }
 
diff --git a/server/RouteController.cpp b/server/RouteController.cpp
index 889779d..1bf9165 100644
--- a/server/RouteController.cpp
+++ b/server/RouteController.cpp
@@ -45,7 +45,6 @@ namespace {
 // BEGIN CONSTANTS --------------------------------------------------------------------------------
 
 const uint32_t RULE_PRIORITY_VPN_OVERRIDE_SYSTEM = 10000;
-const uint32_t RULE_PRIORITY_VPN_OVERRIDE_OIF    = 10500;
 const uint32_t RULE_PRIORITY_VPN_OUTPUT_TO_LOCAL = 11000;
 const uint32_t RULE_PRIORITY_SECURE_VPN          = 12000;
 const uint32_t RULE_PRIORITY_EXPLICIT_NETWORK    = 13000;
@@ -556,16 +555,6 @@ WARN_UNUSED_RESULT int modifyOutputInterfaceRules(const char* interface, uint32_
     fwmark.permission = permission;
     mask.permission = permission;
 
-    // If this rule does not specify a UID range, then also add a corresponding high-priority rule
-    // for UID. This covers forwarded packets and system daemons such as the tethering DHCP server.
-    if (uidStart == INVALID_UID && uidEnd == INVALID_UID) {
-        if (int ret = modifyIpRule(add ? RTM_NEWRULE : RTM_DELRULE, RULE_PRIORITY_VPN_OVERRIDE_OIF,
-                                   table, fwmark.intValue, mask.intValue, IIF_NONE, interface,
-                                   UID_ROOT, UID_ROOT)) {
-            return ret;
-        }
-    }
-
     return modifyIpRule(add ? RTM_NEWRULE : RTM_DELRULE, RULE_PRIORITY_OUTPUT_INTERFACE, table,
                         fwmark.intValue, mask.intValue, IIF_NONE, interface, uidStart, uidEnd);
 }
diff --git a/server/SoftapController.cpp b/server/SoftapController.cpp
index b05118e..08e4942 100755
--- a/server/SoftapController.cpp
+++ b/server/SoftapController.cpp
@@ -42,6 +42,7 @@
 #include "wifi.h"
 #include "wifi_fst.h"
 #include "ResponseCode.h"
+#include "cutils/properties.h"
 
 #include "SoftapController.h"
 
@@ -240,6 +241,8 @@ bool SoftapController::isSoftapStarted() {
     return (mPid != 0);
 }
 
+#define USE_MTK_WLAN   1
+
 /*
  * Arguments:
  *  argv[2] - wlan interface
@@ -253,6 +256,12 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
     int hidden = 0;
     int channel = AP_CHANNEL_DEFAULT;
 
+#ifdef USE_MTK_WLAN
+    char ap_channel[PROPERTY_VALUE_MAX] = {'\0'};
+    const char AP_CHANNEL_PROP_NAME[]="wifi.tethering.channel";
+    char mode;
+#endif
+
     if (argc < 5) {
         ALOGE("Softap set is missing arguments. Please use:");
         ALOGE("softap <wlan iface> <SSID> <hidden/broadcast> <channel> <wpa2?-psk|open> <passphrase>");
@@ -263,11 +272,31 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
         hidden = 1;
 
     if (argc >= 5) {
+    #ifndef USE_MTK_WLAN
         channel = atoi(argv[5]);
         if (channel <= 0)
             channel = AP_CHANNEL_DEFAULT;
+    #else
+        if (property_get(AP_CHANNEL_PROP_NAME, ap_channel, NULL)){
+            channel = atoi(ap_channel);
+        } else {
+            channel = atoi(argv[5]);
+        }
+
+        if (channel < 0) {
+            channel = AP_CHANNEL_DEFAULT;
+            mode = 'g';
+        } else if (channel >= 0 && channel <= 14) {
+            /* 2.4G channel, 0 will trigger MTK auto channel selection */
+            mode = 'g';
+        } else {
+            /* 5G channel */
+            mode = 'a';
+        }
+    #endif
     }
 
+#ifndef USE_MTK_WLAN
     std::string wbuf(StringPrintf("interface=%s\n"
             "driver=nl80211\n"
             "ctrl_interface=/data/misc/wifi/hostapd\n"
@@ -278,6 +307,37 @@ int SoftapController::setSoftap(int argc, char *argv[]) {
             "ignore_broadcast_ssid=%d\n"
             "wowlan_triggers=any\n",
             argv[2], argv[3], channel, (channel <= 14) ? 'g' : 'a', hidden));
+#else
+/*
+ * Arguments:
+ *  argv[2] - wlan interface
+ *  argv[3] - SSID
+ *  argv[4] - Broadcast/Hidden
+ *  argv[5] - Channel
+ *  argv[6] - Security
+ *  argv[7] - Key
+ *  argv[8] - Channel width
+ *  argv[9] - Max connection
+ */
+    std::string wbuf;
+    if (argc > 9) {
+        wbuf = StringPrintf("interface=%s\ndriver=nl80211\nctrl_interface="
+            "/data/misc/wifi/hostapd\nssid=%s\nchannel=%d\nieee80211n=1\n"
+            "hw_mode=%c\nignore_broadcast_ssid=%d\nmax_num_sta=%d\n"
+            "eap_server=1\nwps_state=2\nconfig_methods=display physical_display push_button\n"
+            "device_name=AndroidAP\nmanufacturer=MediaTek Inc.\nmodel_name=MTK Wireless Model\n"
+            "model_number=66xx\nserial_number=1.0\ndevice_type=10-0050F204-5\nwowlan_triggers=disconnect\n",
+            "ap0", argv[3], channel, mode, hidden, atoi(argv[9]));
+    } else {
+        wbuf = StringPrintf("interface=%s\ndriver=nl80211\nctrl_interface="
+            "/data/misc/wifi/hostapd\nssid=%s\nchannel=%d\nieee80211n=1\n"
+            "hw_mode=%c\nignore_broadcast_ssid=%d\n"
+            "eap_server=1\nwps_state=2\nconfig_methods=display physical_display push_button\n"
+            "device_name=AndroidAP\nmanufacturer=MediaTek Inc.\nmodel_name=MTK Wireless Model\n"
+            "model_number=66xx\nserial_number=1.0\ndevice_type=10-0050F204-5\nwowlan_triggers=disconnect\n",
+            "ap0", argv[3], channel, mode, hidden);
+    }
+#endif
 
     std::string fbuf;
     if (argc > 7) {
diff --git a/server/TetherController.cpp b/server/TetherController.cpp
index 0f7f18b..88baa31 100644
--- a/server/TetherController.cpp
+++ b/server/TetherController.cpp
@@ -106,20 +106,13 @@ bool TetherController::enableForwarding(const char* requester) {
     // Don't return an error if this requester already requested forwarding. Only return errors for
     // things that the caller caller needs to care about, such as "couldn't write to the file to
     // enable forwarding".
-    bool trigger = mForwardingRequests.empty();
     mForwardingRequests.insert(requester);
-    if (trigger) {
-        return setIpFwdEnabled();
-    }
-    return true;
+    return setIpFwdEnabled();
 }
 
 bool TetherController::disableForwarding(const char* requester) {
     mForwardingRequests.erase(requester);
-    if (mForwardingRequests.empty()) {
-        return setIpFwdEnabled();
-    }
-    return true;
+    return setIpFwdEnabled();
 }
 
 size_t TetherController::forwardingRequestCount() {
