commit f68c9176d5d4a84e901333376ad2cb653cbb723b
Author: Deepflex <hqdevnews@gmail.com>
Date:   Mon Aug 1 18:32:39 2016 +0700

    mtk system core
    
    Change-Id: I363998f10ff4ec9b277b235053d36694fec56002

diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index 86a4fc6..142537a 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -207,8 +207,8 @@ bool BatteryMonitor::update(void) {
     props.batteryLevel = mBatteryFixedCapacity ?
         mBatteryFixedCapacity :
         getIntField(mHealthdConfig->batteryCapacityPath);
-    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
-
+    //props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+	props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath); // mt6755
     props.batteryTemperature = mBatteryFixedTemperature ?
         mBatteryFixedTemperature :
         getIntField(mHealthdConfig->batteryTemperaturePath);
diff --git a/include/netutils/ifc.h b/include/netutils/ifc.h
index 3b27234..7833ddc 100644
--- a/include/netutils/ifc.h
+++ b/include/netutils/ifc.h
@@ -61,6 +61,23 @@ extern int ifc_configure(const char *ifname, in_addr_t address,
 
 extern in_addr_t prefixLengthToIpv4Netmask(int prefix_length);
 
+
+ 
+#ifdef MTK_HARDWARE
+extern int ifc_is_up(const char *name, unsigned *isup);
+extern int ifc_enable_allmc(const char *name);
+extern int ifc_disable_allmc(const char *name);
+extern int ifc_reset_connection_by_uid(int uid, int error);
+extern int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps);
+extern int ifc_set_fwmark_rule(const char *ifname, int mark, int add);
+extern int ifc_set_txq_state(const char *ifname, int state);
+extern int ifc_ccmni_md_cfg(const char *ifname, int md_id);
+struct uid_err {
+    int appuid;
+	int errorNum;
+};
+#endif
+
 __END_DECLS
 
 #endif /* _NETUTILS_IFC_H_ */
diff --git a/init/Android.mk b/init/Android.mk
index 85dfbfc..065f86f 100644
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -72,6 +72,7 @@ ifneq ($(TARGET_INIT_UMOUNT_AND_FSCK_IS_UNSAFE),)
 LOCAL_CFLAGS += -DUMOUNT_AND_FSCK_IS_UNSAFE
 endif
 
+LOCAL_CFLAGS += -DMTK_MT6755
 LOCAL_MODULE:= init
 LOCAL_C_INCLUDES += \
     external/zlib \
diff --git a/init/init.cpp b/init/init.cpp
index 58d7d34..81dcad7 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -817,7 +817,7 @@ static void export_kernel_boot_props() {
         { "ro.boot.mode",       "ro.bootmode",   "unknown", },
         { "ro.boot.baseband",   "ro.baseband",   "unknown", },
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
-        { "ro.boot.hardware",   "ro.hardware",   "unknown", },
+		{ "ro.boot.hardware",   "ro.hardware",   "mt6755", },
 #ifndef IGNORE_RO_BOOT_REVISION
         { "ro.boot.revision",   "ro.revision",   "0", },
 #endif
@@ -929,6 +929,9 @@ static bool selinux_is_disabled(void)
 
 static bool selinux_is_enforcing(void)
 {
+
+	return false;  //mt6755
+
     if (ALLOW_DISABLE_SELINUX) {
         return selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
@@ -1016,7 +1019,7 @@ static int charging_mode_booting(void) {
         return 0;
 
     close(f);
-    return ('1' == cmb);
+     return ('8' == cmb); //offline charging mt6755
 #endif
 }
 
diff --git a/liblog/logd_write.c b/liblog/logd_write.c
index 7f772af..5ad8900 100644
--- a/liblog/logd_write.c
+++ b/liblog/logd_write.c
@@ -368,6 +368,26 @@ int __android_log_buf_write(int bufID, int prio, const char *tag, const char *ms
     if (!tag)
         tag = "";
 
+    // MediaTek: Prevent log spamming of audio.
+    if (!strcmp(tag, "AudioMTKFilterManager") ||
+        !strcmp(tag, "AudioMTKFilter") ||
+        !strcmp(tag, "AudioMTKStreamOut") ||
+        !strcmp(tag, "AudioVPWStreamIn") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioLoopbackController") ||
+        !strcmp(tag, "AudioMTKVolumeController") ||
+        !strcmp(tag, "AudioDigitalControl") ||
+        !strcmp(tag, "AudioAnalogControl") ||
+        !strcmp(tag, "AudioAfeReg") ||
+        !strcmp(tag, "AudioAnalogReg") ||
+        !strcmp(tag, "AudioPlatformDevice") ||
+        !strcmp(tag, "AudioMachineDevice") ||
+        !strcmp(tag, "MtkAudioLoud") ||
+        !strcmp(tag, "LoopbackManager") ||
+        !strcmp(tag, "AudioInterConnection")) {
+            return 0;
+    }
+
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
          (!strcmp(tag, "HTC_RIL") ||
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index 0bd7628..0b5c53d 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -39,6 +39,12 @@
 
 #include "netutils/ifc.h"
 
+  
+#ifdef MTK_HARDWARE
+#include <linux/un.h>
+#endif
+
+
 #ifdef ANDROID
 #define LOG_TAG "NetUtils"
 #include <cutils/log.h>
@@ -53,6 +59,9 @@
 #ifdef HAVE_ANDROID_OS
 /* SIOCKILLADDR is an Android extension. */
 #define SIOCKILLADDR 0x8939
+#ifdef MTK_HARDWARE
+#define SIOCKILLSOCK 0x893a
+#endif
 #endif
 
 static int ifc_ctl_sock = -1;
@@ -710,3 +719,262 @@ ifc_configure(const char *ifname,
 
     return 0;
 }
+
+
+#ifdef MTK_HARDWARE
+
+int ifc_reset_connection_by_uid(int uid, int error)
+{
+#ifdef HAVE_ANDROID_OS
+
+    int tcp_ctl_sock;
+    int result = -1;
+    struct uid_err uid_e;
+
+    uid_e.appuid = uid;
+    uid_e.errorNum = error;
+
+    tcp_ctl_sock = socket(AF_INET, SOCK_STREAM, 0);
+    if (tcp_ctl_sock < 0) {
+        printerr("socket() failed: %s\n", strerror(errno));
+        return -1;
+    }
+
+    if(uid_e.appuid < 0){
+        ALOGE("ifc_reset_connection_by_uid, invalide uid: %d", uid_e.appuid);
+        close(tcp_ctl_sock);
+        return -1;
+    }
+
+    ALOGD("ifc_reset_connection_by_uid, appuid = %d, error = %d ",
+              uid_e.appuid, uid_e.errorNum);
+    result = ioctl(tcp_ctl_sock, SIOCKILLSOCK, &uid_e);
+    if(result < 0)
+        ALOGE("ifc_reset_connection_by_uid, result= %d, error =%s ", result, strerror(errno));
+
+        close(tcp_ctl_sock);
+    ALOGD("ifc_reset_connection_by_uid, result= %d ",result);
+    return result;
+#else
+    return 0;
+#endif
+}
+
+int ifc_enable_allmc(const char *ifname)
+{
+    int result;
+
+    ifc_init();
+    result = ifc_set_flags(ifname, IFF_ALLMULTI, 0);
+    ifc_close();
+
+    ALOGD("ifc_enable_allmc(%s) = %d", ifname, result);
+    return result;
+}
+
+int ifc_disable_allmc(const char *ifname)
+{
+    int result;
+
+    ifc_init();
+    result = ifc_set_flags(ifname, 0, IFF_ALLMULTI);
+    ifc_close();
+
+    ALOGD("ifc_disable_allmc(%s) = %d", ifname, result);
+    return result;
+}
+int ifc_is_up(const char *name, unsigned *isup)
+{
+    struct ifreq ifr;
+    ifc_init_ifr(name, &ifr);
+
+    if(ioctl(ifc_ctl_sock, SIOCGIFFLAGS, &ifr) < 0) {
+        printerr("ifc_is_up get flags error:%d(%s)", errno, strerror(errno));
+        return -1;
+    }
+    if(ifr.ifr_flags & IFF_UP)
+        *isup = 1;
+    else
+        *isup = 0;
+
+    return 0;
+}
+
+static int ifc_netd_sock_init(void)
+{
+    int ifc_netd_sock;
+    const int one = 1;
+    struct sockaddr_un netd_addr;
+
+        ifc_netd_sock = socket(AF_UNIX, SOCK_STREAM, 0);
+        if (ifc_netd_sock < 0) {
+            printerr("ifc_netd_sock_init: create socket failed");
+            return -1;
+        }
+
+        setsockopt(ifc_netd_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
+        memset(&netd_addr, 0, sizeof(netd_addr));
+        netd_addr.sun_family = AF_UNIX;
+        strlcpy(netd_addr.sun_path, "/dev/socket/netd",
+            sizeof(netd_addr.sun_path));
+        if (TEMP_FAILURE_RETRY(connect(ifc_netd_sock,
+                     (const struct sockaddr*) &netd_addr,
+                     sizeof(netd_addr))) != 0) {
+            printerr("ifc_netd_sock_init: connect to netd failed, fd=%d, err: %d(%s)",
+                ifc_netd_sock, errno, strerror(errno));
+            close(ifc_netd_sock);
+            return -1;
+        }
+
+    if (DBG) printerr("ifc_netd_sock_init fd=%d", ifc_netd_sock);
+    return ifc_netd_sock;
+}
+
+/*do not call this function in netd*/
+int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 1;
+    char rcv_buf[24];
+    int nread = 0;
+    int netd_sock = 0;
+
+    ALOGD("enter ifc_set_throttle: ifname = %s, rx = %d kbs, tx = %d kbs", ifname, rxKbps, txKbps);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+    if(fnetd == NULL){
+        ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+        goto exit;
+    }
+    if (fprintf(fnetd, "%d interface setthrottle %s %d %d", seq, ifname, rxKbps, txKbps) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+    //Todo: read the whole response from netd
+    nread = fread(rcv_buf, 1, 20, fnetd);
+    rcv_buf[23] = 0;
+    ALOGD("response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+    return ret;
+}
+
+/*do not call this function in netd*/
+int ifc_set_fwmark_rule(const char *ifname, int mark, int add)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 2;
+    char rcv_buf[24];
+      int nread = 0;
+      const char* op;
+    int netd_sock = 0;
+
+    if (add) {
+        op = "add";
+    } else {
+        op = "remove";
+    }
+    ALOGD("enter ifc_set_fwmark_rule: ifname = %s, mark = %d, op = %s", ifname, mark, op);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+    if(fnetd == NULL){
+        ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+        goto exit;
+    }
+    if (fprintf(fnetd, "%d network fwmark %s %s %d", seq, op, ifname, mark) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+    //Todo: read the whole response from netd
+    nread = fread(rcv_buf, 1, 20, fnetd);
+    rcv_buf[23] = 0;
+    ALOGD("ifc_set_fwmark_rule response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+    return ret;
+}
+
+#define SIOCSTXQSTATE (SIOCDEVPRIVATE + 0)  //start/stop ccmni tx queue
+#define SIOCSCCMNICFG (SIOCDEVPRIVATE + 1)  //configure ccmni/md remapping
+
+int ifc_set_txq_state(const char *ifname, int state)
+{
+    struct ifreq ifr;
+    int ret, ctl_sock;
+
+    memset(&ifr, 0, sizeof(struct ifreq));
+    strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+    ifr.ifr_name[IFNAMSIZ - 1] = 0;
+    ifr.ifr_ifru.ifru_ivalue = state;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+        ALOGE("create ctl socket failed\n");
+        return -1;
+    }
+    ret = ioctl(ctl_sock, SIOCSTXQSTATE, &ifr);
+    if(ret < 0)
+        ALOGE("ifc_set_txq_state failed, err:%d(%s)\n", errno, strerror(errno));
+    else
+        ALOGI("ifc_set_txq_state as %d, ret: %d\n", state, ret);
+
+    close(ctl_sock);
+
+    return ret;
+}
+
+int ifc_ccmni_md_cfg(const char *ifname, int md_id)
+{
+    struct ifreq ifr;
+    int ret = 0;
+    int ctl_sock = 0;
+
+    ifc_init_ifr(ifname, &ifr);
+    ifr.ifr_ifru.ifru_ivalue = md_id;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+        printerr("ifc_ccmni_md_cfg: create ctl socket failed\n");
+        return -1;
+    }
+
+    if(ioctl(ctl_sock, SIOCSCCMNICFG, &ifr) < 0) {
+        printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) error:%d(%s)", \
+            ifname, md_id, errno, strerror(errno));
+        ret = -1;
+    } else {
+        printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) OK", ifname, md_id);
+    }
+
+    close(ctl_sock);
+    return ret;
+}
+#endif
diff --git a/libutils/Android.mk b/libutils/Android.mk
index 23a5c59..0a31370 100644
--- a/libutils/Android.mk
+++ b/libutils/Android.mk
@@ -83,6 +83,10 @@ LOCAL_CFLAGS += -DALIGN_DOUBLE
 endif
 LOCAL_CFLAGS += -Werror
 
+ifeq ($(BOARD_HAS_MTK_HARDWARE), true)
+LOCAL_SRC_FILES += MediatekHacks.cpp
+endif
+
 LOCAL_STATIC_LIBRARIES := \
 	libcutils \
 	libc
diff --git a/libutils/MediatekHacks.cpp b/libutils/MediatekHacks.cpp
new file mode 100644
index 0000000..33a10ec
--- /dev/null
+++ b/libutils/MediatekHacks.cpp
@@ -0,0 +1,3 @@
+extern "C" {
+ void _ZN7android11IDumpTunnel11asInterfaceERKNS_2spINS_7IBinderEEE(){}
+}
